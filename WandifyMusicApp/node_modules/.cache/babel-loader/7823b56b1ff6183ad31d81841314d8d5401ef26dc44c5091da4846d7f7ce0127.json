{"ast":null,"code":"var _jsxFileName = \"/home/chaitanya/Documents/WandifyMusicApp/wandify_music/src/context/PlayerContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useRef, useState, useEffect } from \"react\";\nimport { songsData } from \"../Assets/assets\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nconst PlayerContextProvider = props => {\n  _s();\n  const audioRef = useRef(new Audio());\n  const seekBgRef = useRef();\n  const seekBarRef = useRef();\n  const [track, setTrack] = useState(songsData[0]);\n  const [playStatus, setPlayStatus] = useState(false);\n  const [time, setTime] = useState({\n    currentTime: {\n      second: 0,\n      minute: 0\n    },\n    totalDuration: {\n      second: 0,\n      minute: 0\n    }\n  });\n  useEffect(() => {\n    audioRef.current.src = track.url;\n    audioRef.current.load();\n  }, [track]);\n  const play = () => {\n    if (audioRef.current.src) {\n      audioRef.current.play().catch(error => console.error(\"Playback failed\", error));\n      setPlayStatus(true);\n    } else {\n      console.error(\"No audio source set\");\n    }\n  };\n  const pause = () => {\n    audioRef.current.pause();\n    setPlayStatus(false);\n  };\n  const setNewTrack = newTrack => {\n    setTrack(newTrack);\n    setPlayStatus(false); // Reset play status when changing tracks\n  };\n  const ContextValue = {\n    audioRef,\n    seekBarRef,\n    seekBgRef,\n    track,\n    setTrack: setNewTrack,\n    playStatus,\n    setPlayStatus,\n    time,\n    setTime,\n    play,\n    pause\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: ContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerContextProvider, \"WZNCteSja2Y0HNmaCUC6NXQ5740=\");\n_c = PlayerContextProvider;\nexport { PlayerContext, PlayerContextProvider };\nvar _c;\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"names":["createContext","useRef","useState","useEffect","songsData","jsxDEV","_jsxDEV","PlayerContext","PlayerContextProvider","props","_s","audioRef","Audio","seekBgRef","seekBarRef","track","setTrack","playStatus","setPlayStatus","time","setTime","currentTime","second","minute","totalDuration","current","src","url","load","play","catch","error","console","pause","setNewTrack","newTrack","ContextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/chaitanya/Documents/WandifyMusicApp/wandify_music/src/context/PlayerContext.js"],"sourcesContent":["import { createContext, useRef, useState, useEffect } from \"react\";\nimport { songsData } from \"../Assets/assets\";\n\nconst PlayerContext = createContext();\n\nconst PlayerContextProvider = (props) => {\n  const audioRef = useRef(new Audio());\n  const seekBgRef = useRef();\n  const seekBarRef = useRef();\n\n  const [track, setTrack] = useState(songsData[0]);\n  const [playStatus, setPlayStatus] = useState(false);\n  const [time, setTime] = useState({\n    currentTime: {\n      second: 0,\n      minute: 0,\n    },\n    totalDuration: {\n      second: 0,\n      minute: 0,\n    },\n  });\n\n  useEffect(() => {\n    audioRef.current.src = track.url;\n    audioRef.current.load();\n  }, [track]);\n\n  const play = () => {\n    if (audioRef.current.src) {\n      audioRef.current\n        .play()\n        .catch((error) => console.error(\"Playback failed\", error));\n      setPlayStatus(true);\n    } else {\n      console.error(\"No audio source set\");\n    }\n  };\n\n  const pause = () => {\n    audioRef.current.pause();\n    setPlayStatus(false);\n  };\n\n  const setNewTrack = (newTrack) => {\n    setTrack(newTrack);\n    setPlayStatus(false); // Reset play status when changing tracks\n  };\n\n  const ContextValue = {\n    audioRef,\n    seekBarRef,\n    seekBgRef,\n    track,\n    setTrack: setNewTrack,\n    playStatus,\n    setPlayStatus,\n    time,\n    setTime,\n    play,\n    pause,\n  };\n\n  return (\n    <PlayerContext.Provider value={ContextValue}>\n      {props.children}\n    </PlayerContext.Provider>\n  );\n};\n\nexport { PlayerContext, PlayerContextProvider };\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClE,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,aAAa,gBAAGP,aAAa,CAAC,CAAC;AAErC,MAAMQ,qBAAqB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAIW,KAAK,CAAC,CAAC,CAAC;EACpC,MAAMC,SAAS,GAAGZ,MAAM,CAAC,CAAC;EAC1B,MAAMa,UAAU,GAAGb,MAAM,CAAC,CAAC;EAE3B,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC;IAC/BmB,WAAW,EAAE;MACXC,MAAM,EAAE,CAAC;MACTC,MAAM,EAAE;IACV,CAAC;IACDC,aAAa,EAAE;MACbF,MAAM,EAAE,CAAC;MACTC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EAEFpB,SAAS,CAAC,MAAM;IACdQ,QAAQ,CAACc,OAAO,CAACC,GAAG,GAAGX,KAAK,CAACY,GAAG;IAChChB,QAAQ,CAACc,OAAO,CAACG,IAAI,CAAC,CAAC;EACzB,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC;EAEX,MAAMc,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIlB,QAAQ,CAACc,OAAO,CAACC,GAAG,EAAE;MACxBf,QAAQ,CAACc,OAAO,CACbI,IAAI,CAAC,CAAC,CACNC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC,CAAC;MAC5Db,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACLc,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAC;IACtC;EACF,CAAC;EAED,MAAME,KAAK,GAAGA,CAAA,KAAM;IAClBtB,QAAQ,CAACc,OAAO,CAACQ,KAAK,CAAC,CAAC;IACxBf,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMgB,WAAW,GAAIC,QAAQ,IAAK;IAChCnB,QAAQ,CAACmB,QAAQ,CAAC;IAClBjB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,MAAMkB,YAAY,GAAG;IACnBzB,QAAQ;IACRG,UAAU;IACVD,SAAS;IACTE,KAAK;IACLC,QAAQ,EAAEkB,WAAW;IACrBjB,UAAU;IACVC,aAAa;IACbC,IAAI;IACJC,OAAO;IACPS,IAAI;IACJI;EACF,CAAC;EAED,oBACE3B,OAAA,CAACC,aAAa,CAAC8B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAG,QAAA,EACzC9B,KAAK,CAAC8B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAE7B,CAAC;AAACjC,EAAA,CA/DIF,qBAAqB;AAAAoC,EAAA,GAArBpC,qBAAqB;AAiE3B,SAASD,aAAa,EAAEC,qBAAqB;AAAG,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}